// src/components/MatchesTab.tsx

import { type FC, useEffect, useRef, useState } from 'react'

import { usePlayers } from '@/context/PlayersContext'
import { useRounds } from '@/context/RoundsContext'
import { generateSchedule } from '@/lib/algorithm'
import type { Player } from '@/types/players'

// shadcn/ui
import { toast } from 'sonner'
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Label } from '@/components/ui/label'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { cn } from '@/lib/utils'

// -----------------------------------------------------------------------------
// Constants
// -----------------------------------------------------------------------------
const PLAYERS_PER_MATCH = 4 as const
const STORAGE_KEY_COURTS = 'match_courts'

// -----------------------------------------------------------------------------
// Utility helpers
// -----------------------------------------------------------------------------
/**
 * Apply (or revert) the statistics of a given round to the players array.
 * @param players Current players array.
 * @param round   Round whose stats will be applied.
 * @param factor  +1 to add stats, -1 to remove.
 */
function applyRoundStats(players: Player[], round: ReturnType<typeof generateSchedule>, factor: 1 | -1) {
  return players.map((player) => {
    let deltaMatches = 0
    const updatedPartners: Record<string, number> = { ...player.partnerCounts }

    round.matches.forEach(({ teamA, teamB }) => {
      const [a1, a2] = teamA
      if (player.id === a1.id || player.id === a2.id) {
        deltaMatches += 1
        const partnerId = player.id === a1.id ? a2.id : a1.id
        updatedPartners[partnerId] = (updatedPartners[partnerId] || 0) + factor
        if (updatedPartners[partnerId] <= 0) delete updatedPartners[partnerId]
      }

      const [b1, b2] = teamB
      if (player.id === b1.id || player.id === b2.id) {
        deltaMatches += 1
        const partnerId = player.id === b1.id ? b2.id : b1.id
        updatedPartners[partnerId] = (updatedPartners[partnerId] || 0) + factor
        if (updatedPartners[partnerId] <= 0) delete updatedPartners[partnerId]
      }
    })

    return {
      ...player,
      matchCount: Math.max(0, player.matchCount + deltaMatches * factor),
      partnerCounts: updatedPartners,
    }
  })
}

// -----------------------------------------------------------------------------
// Custom hook: useLocalStorage
// -----------------------------------------------------------------------------
function useLocalStorage<T>(key: string, initialValue: T) {
  const [value, setValue] = useState<T>(() => {
    const stored = localStorage.getItem(key)
    return stored ? (JSON.parse(stored) as T) : initialValue
  })

  useEffect(() => {
    localStorage.setItem(key, JSON.stringify(value))
  }, [key, value])

  return [value, setValue] as const
}

// -----------------------------------------------------------------------------
// Main component
// -----------------------------------------------------------------------------
const MatchesTab: FC = () => {
  const { players, updatePlayers } = usePlayers()
  const { rounds, addRound, setGames, clear } = useRounds()

  const activePlayers = players.filter((p) => p.active)

  const hasAutoGenerated = useRef(false)

  const [courts, setCourts] = useLocalStorage<number>(STORAGE_KEY_COURTS, 2)
  const [selectedRoundIndex, setSelectedRoundIndex] = useState<number>(rounds.length > 0 ? rounds.length - 1 : 0)

  useEffect(() => {
    if (!hasAutoGenerated.current) {
      hasAutoGenerated.current = true
      // Só gera se ainda não houver nenhuma rodada
      if (rounds.length === 0) {
        handleGenerate()
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  useEffect(() => {
    // ao adicionar/limpar, selecione sempre a última existente
    if (rounds.length === 0) {
      setSelectedRoundIndex(0)
    } else if (selectedRoundIndex > rounds.length - 1) {
      setSelectedRoundIndex(rounds.length - 1)
    }
  }, [rounds, selectedRoundIndex])

  /* --------------------------- Handlers --------------------------- */
  const handleGenerate = () => {
    try {
      // 1. Gera a nova rodada
      const newRound = generateSchedule(activePlayers, courts)

      // 2. Calcula o índice que terá essa rodada
      const newIndex = rounds.length

      // 3. Adiciona a rodada ao contexto
      addRound(newRound)

      // 4. Seleciona automaticamente a nova rodada na UI
      setSelectedRoundIndex(newIndex)

      // 5. Atualiza estatísticas dos jogadores
      updatePlayers((prev) => applyRoundStats(prev, newRound, 1))

      toast.success(`Rodada #${newIndex + 1} gerada!`, {
        duration: 3000,
      })
    } catch (error) {
      toast.error((error as Error).message, {
        duration: 6000,
      })
    }
  }

  const handleShuffle = () => {
    if (players.length < PLAYERS_PER_MATCH) return

    if (rounds.length === 0) {
      handleGenerate()
      return
    }

    // Snapshot das rodadas atuais
    const prevRounds = [...rounds]
    const remainingRounds = prevRounds.slice(0, -1) // todas exceto a última

    // 1. Limpa rodadas e stats
    clear()
    updatePlayers((prev) => prev.map((p) => ({ ...p, matchCount: 0, partnerCounts: {} })))

    // 2. Reaplica as rodadas que ficaram
    remainingRounds.forEach((r) => {
      addRound(r)
      updatePlayers((prev) => applyRoundStats(prev, r, 1))
    })

    // 3. Gera uma nova rodada para substituir a removida
    try {
      const newRound = generateSchedule(activePlayers, courts)
      addRound(newRound)
      updatePlayers((prev) => applyRoundStats(prev, newRound, 1))

      // Seleciona a nova rodada (mantém o mesmo índice da removida)
      setSelectedRoundIndex(remainingRounds.length)

      toast.success('Rodada embaralhada com sucesso!', { duration: 3000 })
    } catch (error) {
      toast.error((error as Error).message, { duration: 6000 })
    }
  }

  const handleClear = () => {
    clear()
    updatePlayers((prev) =>
      prev.map((player) => ({
        ...player,
        matchCount: 0,
        partnerCounts: {},
      })),
    )
    toast.success('Todas as rodadas apagadas!', { duration: 3000 })
  }

  /* --------------------------- Score input ------------------------- */
  const ScoreInput: FC<{
    value: number | null
    onChange: (v: number | null) => void
  }> = ({ value, onChange }) => (
    <Input
      type="number"
      min={0}
      className="w-8 text-center"
      value={value ?? ''}
      onChange={(e) => {
        const v = e.target.value
        onChange(v === '' ? null : Number(v))
      }}
    />
  )

  /* ----------------------------- Render ---------------------------- */
  return (
    <Card>
      <CardHeader>
        <CardTitle>Partidas</CardTitle>
      </CardHeader>

      <CardContent>
        {/* ------------------------ Controls ----------------------- */}
        <div className="flex flex-wrap items-end gap-4 justify-between">
          <div className="flex flex-col gap-3">
            <Label htmlFor="courts">Quadras</Label>
            <Input
              className="w-16"
              id="courts"
              type="number"
              min={1}
              value={courts}
              onChange={(e) => setCourts(Number(e.target.value))}
            />
          </div>

          {rounds.length > 0 && (
            <div className="flex gap-2">
              <Button variant="destructive" onClick={handleClear} disabled={rounds.length === 0}>
                Limpar
              </Button>

              <Select value={String(selectedRoundIndex)} onValueChange={(v) => setSelectedRoundIndex(Number(v))}>
                <SelectTrigger>
                  <SelectValue placeholder="Selecione..." />
                </SelectTrigger>
                <SelectContent>
                  {rounds.map((_, idx) => (
                    <SelectItem key={idx} value={String(idx)}>
                      Rodada {idx + 1}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          )}
        </div>

        {/* ---------------------- Rounds list ---------------------- */}
        <ScrollArea className="min-h-0 relative flex-1 overflow-hidden" type="scroll">
          <ul className="h-full w-full flex flex-col gap-2">
            {rounds.length === 0 ? (
              <p className="italic text-muted-foreground">Nenhuma rodada gerada ainda.</p>
            ) : (
              (() => {
                const round = rounds[selectedRoundIndex]
                return (
                  <article className="flex flex-col flex-1 gap-2">
                    <h2 className="border-l-4 border-primary pl-3 text-xl font-bold">
                      Rodada {selectedRoundIndex + 1}
                    </h2>
                    <ol className="flex flex-col gap-6 overflow-hidden flex-1">
                      {round.matches.map((m) => (
                        <li
                          key={m.id}
                          className="rounded-2xl border bg-muted px-3 py-4 shadow-sm overflow-hidden flex-1"
                        >
                          {/* Times + placar */}
                          <div className="flex flex-1 items-center gap-4">
                            <TeamView players={m.teamA} isWinner={m.winner === 'A'} team={'A'} />
                            <div className="flex flex-col items-center gap-1">
                              <ScoreInput
                                value={m.gamesA}
                                onChange={(v) => setGames(selectedRoundIndex, m.id, 'A', v)}
                              />
                              <span className="font-bold">×</span>
                              <ScoreInput
                                value={m.gamesB}
                                onChange={(v) => setGames(selectedRoundIndex, m.id, 'B', v)}
                              />
                            </div>
                            <TeamView players={m.teamB} isWinner={m.winner === 'B'} team={'B'} />
                          </div>
                        </li>
                      ))}
                    </ol>
                  </article>
                )
              })()
            )}
          </ul>
        </ScrollArea>
      </CardContent>
      <CardFooter>
        <div className="flex w-full gap-2">
          <Button
            className="flex-1 max-w-fit"
            variant="ghost"
            onClick={handleShuffle}
            disabled={rounds.length === 0 || players.length < PLAYERS_PER_MATCH}
          >
            Embaralhar
          </Button>
          <Button className="flex-1" onClick={handleGenerate} disabled={players.length < PLAYERS_PER_MATCH}>
            Gerar
          </Button>
        </div>
      </CardFooter>
    </Card>
  )
}

// -----------------------------------------------------------------------------
// TeamView sub-component
// -----------------------------------------------------------------------------
interface TeamViewProps {
  players: Player[]
  isWinner: boolean
  team: 'A' | 'B'
}
const TeamView: FC<TeamViewProps> = ({ players, isWinner, team }) => (
  <div className={`flex flex-1 flex-col gap-2 ${isWinner ? 'ring-2 ring-green-500 rounded-lg p-1' : ''}`}>
    {/*<h3 className="text-lg font-medium opacity-75">{title}</h3>*/}
    <div className="flex flex-col max-w-full">
      {players.map((p) => (
        <div key={p.id} className={cn('flex items-end gap-2 text-base', team === 'B' && 'justify-end')}>
          <p>{p.name}</p>
          {/*<Badge variant="outline" className="text-xs">*/}
          {/*  Lv {p.level}*/}
          {/*</Badge>*/}
        </div>
      ))}
    </div>
  </div>
)

export default MatchesTab
